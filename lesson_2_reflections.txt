What happens when you initialize a repository? Why do you need to do it?

Initializing the repository creates the .git file which will keep track of all the different files statesover the life of the file.  


How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area allows us to select the files that we want to commit to the repository and then shows uswhat will be committed.  It allows us to commit only the files that we have changed rather than everything in the repository.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches help when you are working on a new feature or version of your code but are not ready to introduce it to the main code quite yet.  This allows you to keep the working version of your code up while working on new features seperately. 

How do the diagrams help you visualize the branch structure?

Diagraming the branchs can help you understand what the parent branch is for each commit.

What is the result of merging two branches together? Why do we represent it in the a diagram the way we do?

Merging two branches keeps a log of all the commits on both branches and merges them by simply forgetting the name of the branch we wish to get rid of and keeps the master or whatever branch you are checked out on.  The diagram allows us to see which branch is the parent for the different commits.


What are the pros and cons of git's automatic merging vs. always doing merges manually?

The pros are that the it will never accidently let you merge over something and clearly annotates what is differeing between the two branches, while manually merging will not show you the differences.

